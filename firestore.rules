rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Users can read their own data and update it. Anyone can read public profiles.
    match /users/{userId} {
      allow read: if true;
      allow create, update: if request.auth != null && request.auth.uid == userId;
    }

    // Ads can be read by anyone.
    // They can be created by authenticated users.
    // They can be deleted only by their owner.
    // They can be updated by their owner, OR any user can update ONLY the 'likes' field.
    match /ads/{adId} {
      allow read: if true;

      allow create: if request.auth != null &&
                    request.auth.uid == request.resource.data.userId;

      allow update: if request.auth != null &&
                    (
                      // Owner can update their ad
                      (request.auth.uid == resource.data.userId) ||
                      // Any logged-in user can update ONLY the likes field.
                      (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes']))
                    );

      allow delete: if request.auth != null &&
                    request.auth.uid == resource.data.userId;
    }

    // Interests can be read by anyone.
    // They can be created and deleted only by the user who is expressing interest.
    match /interests/{interestId} {
      allow read: if true;

      // The document ID is in the format {userId}_{jobId}
      // This rule ensures the creator's UID matches the first part of the doc ID,
      // and also matches the userId field in the document data.
      allow create: if request.auth != null &&
                    request.auth.uid == request.resource.data.userId &&
                    interestId.split('_')[0] == request.auth.uid;

      // Allow deletion only if the user's UID matches the first part of the document ID.
      allow delete: if request.auth != null &&
                    interestId.split('_')[0] == request.auth.uid;
    }
  }
}
